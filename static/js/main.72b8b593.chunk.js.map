{"version":3,"sources":["components/FeedbackOptions/FeedbackOptions.js","components/Statistics/Statistics.js","components/Notification/Notification.js","App.js","reportWebVitals.js","index.js"],"names":["FeedbackOptions","options","onLeaveFeedback","Object","keys","map","opt","name","onClick","className","Statistics","total","positivePercentage","key","toFixed","Notification","message","propType","PropTypes","string","isRequired","App","state","good","neutral","bad","target","setState","prevState","values","this","reduce","acc","val","countTotalFeedback","StrictMode","countPositiveFeedbackPercentage","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"4RAEaA,EAAkB,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,gBAAZ,OAC9B,mCACEC,OAAOC,KAAKH,GAASI,KAAI,SAAAC,GAAG,OAC5B,wBAECC,KAAMD,EACNE,QAASN,EACTO,UAAU,aAJX,SAMEH,GALIA,SCJII,EAAa,SAAC,GAAD,IAAGT,EAAH,EAAGA,QAASU,EAAZ,EAAYA,MAAOC,EAAnB,EAAmBA,mBAAnB,OACzB,qCACET,OAAOC,KAAKH,GAASI,KAAI,SAAAQ,GAAG,OAC5B,oBAAaJ,UAAU,aAAvB,UACEI,EADF,KACQ,iCAASZ,EAAQY,OADjBA,MAIT,wCACQ,iCAASF,OAEjB,oDACoB,mCAASC,EAAmBE,QAAQ,GAApC,c,OCXTC,EAAe,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAAiB,4BAAIA,KAEjDD,EAAaE,SAAW,CACvBD,Q,OAASE,EAAUC,OAAOC,Y,IC+CZC,E,4MA7CdC,MAAQ,CACPC,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGNvB,gBAAkB,YAAiB,IAC1BK,EADyB,EAAbmB,OACZnB,KACR,EAAKoB,UAAS,SAAAC,GAAS,sBACrBrB,EAAOqB,EAAUrB,GAAQ,O,wDAI5B,WACC,OAAOJ,OAAO0B,OAAOC,KAAKR,OAAOS,QAAO,SAACC,EAAKC,GAAN,OAAeD,EAAOC,IAAM,K,6CAGrE,WACC,OAAQH,KAAKR,MAAMC,KAAOO,KAAKI,qBAAwB,M,oBAGxD,WACC,IAAMvB,EAAQmB,KAAKI,qBAEnB,OACC,eAAC,IAAMC,WAAP,WACC,uDACA,cAAC,EAAD,CACClC,QAAS6B,KAAKR,MACdpB,gBAAiB4B,KAAK5B,kBAEtBS,EACA,cAAC,EAAD,CACCA,MAAOA,EACPC,mBAAoBkB,KAAKM,kCACzBnC,QAAS6B,KAAKR,QAGf,cAAC,EAAD,CAAcN,QAAQ,6B,GAvCTqB,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMb,WAAP,UACE,cAAC,EAAD,MAEFc,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.72b8b593.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\n\nexport const FeedbackOptions = ({ options, onLeaveFeedback }) => (\n\t<>\n\t\t{Object.keys(options).map(opt => (\n\t\t\t<button\n\t\t\t\tkey={opt}\n\t\t\t\tname={opt}\n\t\t\t\tonClick={onLeaveFeedback}\n\t\t\t\tclassName=\"capitalize\"\n\t\t\t>\n\t\t\t\t{opt}\n\t\t\t</button>\n\t\t))}\n\t</>\n);\n\nFeedbackOptions.propTypes = {\n\toptions: PropTypes.object.isRequired,\n\tonLeaveFeedback: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\n\nexport const Statistics = ({ options, total, positivePercentage }) => (\n\t<>\n\t\t{Object.keys(options).map(key => (\n\t\t\t<p key={key} className=\"capitalize\">\n\t\t\t\t{key}: <strong>{options[key]}</strong>\n\t\t\t</p>\n\t\t))}\n\t\t<p>\n\t\t\tTotal: <strong>{total}</strong>\n\t\t</p>\n\t\t<p>\n\t\t\tPositive feedback: <strong>{positivePercentage.toFixed(0)}%</strong>\n\t\t</p>\n\t</>\n);\n\nStatistics.propTypes = {\n\toptions: PropTypes.object.isRequired,\n\ttotal: PropTypes.number.isRequired,\n\tpositivePercentage: PropTypes.number.isRequired,\n};\n","import PropTypes from 'prop-types';\n\nexport const Notification = ({ message }) => <p>{message}</p>;\n\nNotification.propType = {\n\tmessage: PropTypes.string.isRequired,\n};\n","import React, { Component } from 'react';\nimport './App.css';\nimport { FeedbackOptions } from './components/FeedbackOptions';\nimport { Statistics } from './components/Statistics';\nimport { Notification } from './components/Notification';\n\nclass App extends Component {\n\tstate = {\n\t\tgood: 0,\n\t\tneutral: 0,\n\t\tbad: 0,\n\t};\n\n\tonLeaveFeedback = ({ target }) => {\n\t\tconst { name } = target;\n\t\tthis.setState(prevState => ({\n\t\t\t[name]: prevState[name] + 1,\n\t\t}));\n\t};\n\n\tcountTotalFeedback() {\n\t\treturn Object.values(this.state).reduce((acc, val) => (acc += val), 0);\n\t}\n\n\tcountPositiveFeedbackPercentage() {\n\t\treturn (this.state.good / this.countTotalFeedback()) * 100;\n\t}\n\n\trender() {\n\t\tconst total = this.countTotalFeedback();\n\n\t\treturn (\n\t\t\t<React.StrictMode>\n\t\t\t\t<h1>Please leave feedback</h1>\n\t\t\t\t<FeedbackOptions\n\t\t\t\t\toptions={this.state}\n\t\t\t\t\tonLeaveFeedback={this.onLeaveFeedback}\n\t\t\t\t/>\n\t\t\t\t{total ? (\n\t\t\t\t\t<Statistics\n\t\t\t\t\t\ttotal={total}\n\t\t\t\t\t\tpositivePercentage={this.countPositiveFeedbackPercentage()}\n\t\t\t\t\t\toptions={this.state}\n\t\t\t\t\t/>\n\t\t\t\t) : (\n\t\t\t\t\t<Notification message=\"No feedback given\" />\n\t\t\t\t)}\n\t\t\t</React.StrictMode>\n\t\t);\n\t}\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}